# -*- coding: utf-8 -*-
"""61.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Ug5yIDYd6iEA_1wYIY7N1xnxjaU2O3xU
"""

import matplotlib.pyplot as plt
import numpy as np

def f(x):
    return x**3 - x - 1

def secant_method(x0, x1, tol=1e-6, max_iter=100):
    approximation_errors = []
    relative_approximation_errors = []
    x_values = []
    i = 0

    while i < max_iter:
        xi_minus_1 = x0
        fi_minus_1 = f(xi_minus_1)

        xi = x1
        fi = f(xi)

        if xi == xi_minus_1:
            print("xi and xi_minus_1 are the same. Secant method may not converge.")
            return None

        f_prime_i = (fi - fi_minus_1) / (xi - xi_minus_1)

        xi_plus_1 = xi - fi / f_prime_i
        approx_error = abs(xi_plus_1 - xi)
        rel_approx_error = abs(approx_error / xi_plus_1)

        print(f"Iteration {i+1}:")
        print(f"xi-1 = {xi_minus_1:.6f}, f(xi-1) = {fi_minus_1:.6f}")
        print(f"xi = {xi:.6f}, f(xi) = {fi:.6f}, f'(xi) = {f_prime_i:.6f}")
        print(f"xi+1 = {xi_plus_1:.6f}, Approximation error = {approx_error:.6f}, Relative approximation error = {rel_approx_error:.6f}")

        x_values.append(xi_plus_1)
        approximation_errors.append(approx_error)
        relative_approximation_errors.append(rel_approx_error)

        if approx_error < tol:
            print("Converged successfully!")
            break

        x0 = xi
        x1 = xi_plus_1
        i += 1

    return x_values, approximation_errors, relative_approximation_errors

x0_secant = 50
x1_secant = 48

x_values_secant, approximation_errors_secant, relative_approximation_errors_secant = secant_method(x0_secant, x1_secant)

# Visualizing the approximation errors using a bar chart
iterations_secant = list(range(1, len(approximation_errors_secant) + 1))
plt.bar(iterations_secant, approximation_errors_secant)
plt.xlabel('Iteration Number')
plt.ylabel('Approximation Error')
plt.title('Approximation Errors using Secant Method')
plt.show()

# Visualizing the relative approximation errors using a bar chart
plt.bar(iterations_secant, relative_approximation_errors_secant)
plt.xlabel('Iteration Number')
plt.ylabel('Relative Approximation Error')
plt.title('Relative Approximation Errors using Secant Method')
plt.show()

import matplotlib.pyplot as plt
import numpy as np

def f(x):
    return x**3 - x - 1

def f_of(x):
    return 3 * x**2 - 1

def newton_raphson_method(x0, max=20):
    approx_error = []
    relative_approximation_errors = []
    x_values = []
    i = 0

    while i < max:
        xi = x0
        fi = f(xi)
        f_of_i = f_of(xi)

        xi_plus_1 = xi - fi / f_of_i
        error = abs(xi_plus_1 - xi)
        rel_approxerror = abs(error / xi_plus_1)

        print(f"Iteration {i+1}:")
        print(f"xi = {xi:.6f}, f(xi) = {fi:.6f}, f'(xi) = {f_of_i:.6f}")
        print(f"xi+1 = {xi_plus_1:.6f}, Approximation error = {error:.6f}, Relative approximation error = {rel_approxerror:.6f}")

        x_values.append(xi_plus_1)
        approx_error.append(error)

        x_values.append(xi_plus_1 )
        relative_approximation_errors.append(rel_approxerror)

        x0 = xi_plus_1
        i += 1

    return x_values, approx_error, relative_approximation_errors

def secant_method(x0, x1, max_iter=20):
    approximation_errors = []
    relative_approximation_errors = []
    x_values = []
    i = 0

    while i < max_iter:
        xi_minus_1 = x0
        fi_minus_1 = f(xi_minus_1)

        xi = x1
        fi = f(xi)


        f_prime_i = (fi - fi_minus_1) / (xi - xi_minus_1)

        xi_plus_1 = xi - fi / f_prime_i
        approx_error = abs(xi_plus_1 - xi)
        rel_approx_error = abs(approx_error / xi_plus_1)

        print(f"Iteration {i+1}:")
        print(f"xi-1 = {xi_minus_1:.6f}, f(xi-1) = {fi_minus_1:.6f}")
        print(f"xi = {xi:.6f}, f(xi) = {fi:.6f}, f'(xi) = {f_prime_i:.6f}")
        print(f"xi+1 = {xi_plus_1:.6f}, Approximation error = {approx_error:.6f}, Relative approximation error = {rel_approx_error:.6f}")

        x_values.append(xi_plus_1)
        approximation_errors.append(approx_error)
        relative_approximation_errors.append(rel_approx_error)

        x0 = xi
        x1 = xi_plus_1
        i += 1

    return x_values, approximation_errors, relative_approximation_errors

x0_newton = 50
x0_secant = 50
x1_secant = 48

x_values_newton, approximation_errors_newton, rel_approx_error_newton = newton_raphson_method(x0_newton)

x_values_secant, approximation_errors_secant, rel_approx_error_secant = secant_method(x0_secant, x1_secant)


iterations_newton = list(range(1, len(approximation_errors_newton) + 1))
iterations_secant = list(range(1, len(approximation_errors_secant) + 1))

plt.plot(iterations_newton, approximation_errors_newton, label='Newton-Raphson')
plt.plot(iterations_secant, approximation_errors_secant, label='Secant')
plt.xlabel('Iteration Number')
plt.ylabel('Approximation Error')
plt.title('Approximation Errors: Newton-Raphson vs Secant Method')
plt.legend()
plt.show()

plt.plot(iterations_newton, rel_approx_error_newton, label='Newton-Raphson')
plt.plot(iterations_secant, rel_approx_error_secant, label='Secant')
plt.xlabel('Iteration Number')
plt.ylabel('Relative Approximation Error')
plt.title('Relative Approximation Errors: Newton-Raphson vs Secant Method')
plt.legend()
plt.show()