# -*- coding: utf-8 -*-
"""61.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1i2UCRYA7IiAQtjcopVXWXoTKc1xbKLbb
"""

import numpy as np

def equations(xyz):
    x, y, z = xyz
    f1 = x**2 - 2*x + y**2 - z + 1
    f2 = x*y**2 - x - 3*y + y*z + 2
    f3 = x*z**2 - 3*z + y*z**2 + x*y
    return np.array([f1, f2, f3])

def jacobian(xyz):
    x, y, z = xyz
    df1_dx = 2*x - 2
    df1_dy = 2*y
    df1_dz = -1

    df2_dx = y**2 - 1
    df2_dy = 2*x*y - 3 + z
    df2_dz = y

    df3_dx = z**2 + y
    df3_dy = x + z**2
    df3_dz = 2*x*z - 3 + 2*y*z

    return np.array([[df1_dx, df1_dy, df1_dz],
                     [df2_dx, df2_dy, df2_dz],
                     [df3_dx, df3_dy, df3_dz]])

def newton_raphson(equations, jacobian, initial_guess, tol=1e-6, max_iter=100):
    xyz = np.array(initial_guess, dtype=float)

    for i in range(max_iter):
        f = equations(xyz)
        J = jacobian(xyz)
        delta_xyz = np.linalg.solve(J, -f)
        xyz += delta_xyz

        if np.linalg.norm(f, np.inf) < tol:
            return xyz

    raise Exception("Newton-Raphson did not converge")

initial_guess = [1, 2, 4]

roots = newton_raphson(equations, jacobian, initial_guess, tol=1e-6, max_iter=100)
print("Roots:", roots)