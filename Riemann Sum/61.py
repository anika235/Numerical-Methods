# -*- coding: utf-8 -*-
"""61.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1O0iXoyNsR-DK-NTfjS5IC253kvGi5zSM
"""

import matplotlib.pyplot as plt
import numpy as np

def f(x):
    return x**2

def left_riem_sum(delta_x,a, b, n):
    sum = 0
    i = 0
    while i < n:
        x_i = a + i * delta_x
        sum += f(x_i)
        i += 1
    return sum * delta_x

def right_riem_sum(delta_x,a, b, n):
    sum = 0
    i = 1
    while i <= n:
        x_i = a + i * delta_x
        sum += f(x_i)
        i += 1
    return sum * delta_x

def midpoint_method(delta_x,a, b, n):
    sum = 0
    i = 0
    while i < n:
        x_midpoint = a + (i + 0.5) * delta_x
        sum += f(x_midpoint)
        i += 1
    return sum * delta_x

def trapezoidal_method(delta_x,a, b, n):
    sum = 0
    i=0
    while i < n:
        x_i = a + i*delta_x
        x_next = a + (i + 1)*delta_x
        sum += 0.5 * (f(x_i) + f(x_next))
        i+=1
    return sum * delta_x

a = 0
b = 4

actual_integral = (1/3) * (b**3 - a**3)

delta_x_values = np.linspace(1e-4,1.0,100)

left_sums = []
right_sums = []
midpoint_sums = []
trapezoidal_sums = []

for delta_x in delta_x_values:
    n = int((b - a) / delta_x)

    left_sum = left_riem_sum(delta_x, a, b, n)
    right_sum = right_riem_sum(delta_x,a, b, n)
    midpoint_sum = midpoint_method(delta_x,a, b, n)
    trapezoidal_sum = trapezoidal_method(delta_x,a, b, n)

    left_sums.append(left_sum)
    right_sums.append(right_sum)
    midpoint_sums.append(midpoint_sum)
    trapezoidal_sums.append(trapezoidal_sum)

    print(f"Δx = {delta_x}:")
    print(f"Left Riemann Sum: {left_sum}")
    print(f"Right Riemann Sum: {right_sum}")
    print(f"Midpoint Method: {midpoint_sum}")
    print(f"Trapezoidal Method: {trapezoidal_sum}")
    print(f"Actual Integral: {actual_integral}\n")

plt.figure(figsize=(10, 6))
plt.plot(delta_x_values, left_sums, label='Left Riemann Sum', marker='o')
plt.plot(delta_x_values, right_sums, label='Right Riemann Sum', marker='o')
plt.plot(delta_x_values, midpoint_sums, label='Midpoint Method', marker='o')
plt.plot(delta_x_values, trapezoidal_sums, label='Trapezoidal Method', marker='o')
plt.axhline(actual_integral, color='r', linestyle='--', label='Actual Integral')
plt.xlabel('Δx')
plt.ylabel('Approximations')
plt.title('Approximations of Integral vs. Δx')
plt.legend()
plt.show()